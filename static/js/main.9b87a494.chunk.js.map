{"version":3,"sources":["Pokecard.js","Pokedex.js","Pokegame.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","n","width","z","pokemon","this","props","imgUrl","id","length","Array","join","className","name","alt","src","type","base_experience","Component","Pokedex","winner","class","exp","pokemons","map","value","index","Pokegame","firstPokedex","secondPokedex","firstEXP","secondEXP","forEach","item","min","max","rand","Math","floor","random","maxPokedexLen","push","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2TA0BeA,E,iLAbP,IAROC,EAAGC,EAAOC,EAQXC,EAAUC,KAAKC,MAAMF,QACrBG,EAXC,8DAEAN,EASuBG,EAAQI,GAR1CL,EAAIA,GAAK,KACTF,GAAQ,IACCQ,SAHKP,EASgC,GANnBD,EAAI,IAAIS,MAAMR,EAAQD,EAAEQ,OAAS,GAAGE,KAAKR,GAAKF,GAMtB,OAC/C,OACI,yBAAKW,UAAU,YACX,4BAAKR,EAAQS,MACb,yBAAKC,IAAKV,EAAQS,KAAME,IAAKR,IAC7B,2BAAG,yCAAH,IAA2BH,EAAQY,MACnC,2BAAG,wCAAH,IAA0BZ,EAAQa,sB,GAT3BC,aCURC,G,uLAfP,OACI,yBAAKP,UAAU,WACVP,KAAKC,MAAMc,OAAS,wBAAIC,MAAM,UAAV,gBAAuC,wBAAIA,MAAM,SAAV,eAC5D,2BAAG,qDAAH,IAAuChB,KAAKC,MAAMgB,KAClD,yBAAKV,UAAU,oBACVP,KAAKC,MAAMiB,SAASC,KAAI,SAACC,EAAOC,GAC7B,OAAO,kBAAC,EAAD,CAAUtB,QAASqB,a,GAR5BP,cCDhBK,EAAW,CACb,CAACf,GAAI,EAAGK,KAAM,aAAcG,KAAM,OAAQC,gBAAiB,IAC3D,CAACT,GAAI,EAAGK,KAAM,WAAYG,KAAM,QAASC,gBAAiB,IAC1D,CAACT,GAAI,GAAIK,KAAM,UAAWG,KAAM,MAAOC,gBAAiB,IACxD,CAACT,GAAI,GAAIK,KAAM,aAAcG,KAAM,SAAUC,gBAAiB,KAC9D,CAACT,GAAI,GAAIK,KAAM,UAAWG,KAAM,WAAYC,gBAAiB,KAC7D,CAACT,GAAI,GAAIK,KAAM,aAAcG,KAAM,SAAUC,gBAAiB,IAC9D,CAACT,GAAI,GAAIK,KAAM,SAAUG,KAAM,SAAUC,gBAAiB,KAC1D,CAACT,GAAI,IAAKK,KAAM,QAASG,KAAM,SAAUC,gBAAiB,K,IAoD/CU,E,iLAxCP,IAAIC,EAAe,GACfC,EAAgB,GAChBC,EAAW,EACXC,EAAY,EA4BhB,OA1BAR,EAASS,SAAQ,SAACC,EAAMP,GACpB,IAfUQ,EAAKC,EAeTC,GAfIF,EAegB,EAfXC,EAea,EAd7BE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,IAAMA,GAevCM,EAAgBjB,EAASd,OAAS,EAE5B,IAAT2B,EACIR,EAAanB,OAAS+B,GACrBZ,EAAaa,KAAKR,GAClBH,GAAYG,EAAKhB,kBAEjBY,EAAcY,KAAKR,GACnBF,GAAaE,EAAKhB,iBAInBY,EAAcpB,OAAS+B,GACtBX,EAAcY,KAAKR,GACnBF,GAAaE,EAAKhB,kBAGlBW,EAAaa,KAAKR,GAClBH,GAAYG,EAAKhB,oBAOzB,yBAAKL,UAAU,YACX,kBAAC,EAAD,CAASW,SAAUK,EAAcN,IAAKQ,EAAUV,OAAQU,EAAWC,IACnE,kBAAC,EAAD,CAASR,SAAUM,EAAeP,IAAKS,EAAWX,OAAQW,EAAYD,S,GAvC/DZ,aCHRwB,E,iLATX,OACE,yBAAK9B,UAAU,OACb,kBAAC,EAAD,W,GAJUM,aCQEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9b87a494.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Pokecard.css';\r\n\r\nconst imgsrc = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/';\r\n\r\nfunction padId(n, width, z) {\r\n    z = z || '0';\r\n    n = n + '';\r\n    return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\r\n}\r\n\r\nclass Pokecard extends Component {\r\n    render() {\r\n        const pokemon = this.props.pokemon;\r\n        const imgUrl = imgsrc + padId(pokemon.id, 3) + '.png';\r\n        return(\r\n            <div className=\"Pokecard\">\r\n                <h1>{pokemon.name}</h1>\r\n                <img alt={pokemon.name} src={imgUrl}></img>\r\n                <p><strong>Type:</strong> {pokemon.type}</p>\r\n                <p><strong>EXP:</strong> {pokemon.base_experience}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pokecard;","import React, { Component } from 'react';\r\nimport Pokecard from './Pokecard';\r\nimport './Pokedex.css';\r\n\r\nclass Pokedex extends Component {\r\n    render() {\r\n        return(\r\n            <div className=\"Pokedex\">\r\n                {this.props.winner ? <h1 class=\"winner\">Winning Hand</h1> : <h1 class=\"loser\">Losing Hand</h1>}\r\n                <p><strong>Total experience:</strong> {this.props.exp}</p>\r\n                <div className=\"PokemonContainer\">\r\n                    {this.props.pokemons.map((value, index) => {\r\n                        return <Pokecard pokemon={value} />\r\n                    })}\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pokedex;","import React, { Component } from 'react';\r\nimport Pokedex from './Pokedex.js';\r\n\r\nconst pokemons = [\r\n    {id: 4, name: 'Charmander', type: 'fire', base_experience: 62},\r\n    {id: 7, name: 'Squirtle', type: 'water', base_experience: 63},\r\n    {id: 11, name: 'Metapod', type: 'bug', base_experience: 72},\r\n    {id: 12, name: 'Butterfree', type: 'flying', base_experience: 178},\r\n    {id: 25, name: 'Pikachu', type: 'electric', base_experience: 112},\r\n    {id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95},\r\n    {id: 94, name: 'Gengar', type: 'poison', base_experience: 225},\r\n    {id: 133, name: 'Eevee', type: 'normal', base_experience: 65}\r\n  ];\r\n\r\nfunction getRandomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nclass Pokegame extends Component {\r\n\r\n\r\n\r\n    render() {\r\n        let firstPokedex = [];\r\n        let secondPokedex = [];\r\n        let firstEXP = 0;\r\n        let secondEXP = 0;\r\n        // Pushes pokemons to the pokedexs randomly\r\n        pokemons.forEach((item, index) => {\r\n            const rand = getRandomInt(1,2);\r\n            const maxPokedexLen = pokemons.length / 2;\r\n\r\n            if(rand === 1) {\r\n                if(firstPokedex.length < maxPokedexLen) {\r\n                    firstPokedex.push(item);\r\n                    firstEXP += item.base_experience;\r\n                } else {\r\n                    secondPokedex.push(item);\r\n                    secondEXP += item.base_experience;\r\n\r\n                }\r\n            } else {\r\n                if(secondPokedex.length < maxPokedexLen) {\r\n                    secondPokedex.push(item);\r\n                    secondEXP += item.base_experience;\r\n\r\n                } else {\r\n                    firstPokedex.push(item);\r\n                    firstEXP += item.base_experience;\r\n\r\n                }           \r\n            }\r\n        })\r\n\r\n        return(\r\n            <div className=\"Pokegame\">\r\n                <Pokedex pokemons={firstPokedex} exp={firstEXP} winner={firstEXP > secondEXP}/>\r\n                <Pokedex pokemons={secondPokedex} exp={secondEXP} winner={secondEXP > firstEXP}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pokegame;","import React, { Component } from 'react';\nimport './App.css';\nimport Pokegame from './Pokegame';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Pokegame />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}